batch_dict dict_keys(['points', 'frame_id', 'gt_boxes', 'use_lead_xyz', 'image_shape', 'batch_size'])
batch_dict: 
 dict_keys(['points', 'frame_id', 'gt_boxes', 'use_lead_xyz', 'image_shape', 'batch_size']) 


------------------------------MSG------------------------------
batch_dict: 
 dict_keys(['points', 'frame_id', 'gt_boxes', 'use_lead_xyz', 'image_shape', 'batch_size', 'point_features', 'point_coords']) 


---------------------------------------------------------------


------------------------------Head-----------------------------
point_features:  torch.Size([32768, 128]) 

point_coords:  torch.Size([32768, 4]) 

point_cls_scores: torch.Size([32768]) 

point_cls_preds:  torch.Size([32768, 3]) 

point_box_preds:  torch.Size([32768, 8]) 


#########assing target###########
extend_gt_boxes:  torch.Size([2, 35, 8]) 


###########assign_stack_targets
points:  torch.Size([32768, 4]) 

gt_boxes:  torch.Size([2, 35, 8]) 

point_cls_labels:  torch.Size([32768]) 

point_box_labels:  torch.Size([32768]) 

point_part_labels:  torch.Size([32768]) 

bs_mask:  torch.Size([32768]) 

points_single:  torch.Size([16384, 3]) 

point_cls_labels_single:  torch.Size([16384]) 


####################points_in_boxes_gpu
points:  torch.Size([1, 16384, 3]) 

boxes:  torch.Size([1, 35, 7])
#######################################

box_idxs_of_pts:  torch.Size([16384]) 


####################points_in_boxes_gpu
points:  torch.Size([1, 16384, 3]) 

boxes:  torch.Size([1, 35, 7])
#######################################

bs_mask:  torch.Size([32768]) 

points_single:  torch.Size([16384, 3]) 

point_cls_labels_single:  torch.Size([16384]) 


####################points_in_boxes_gpu
points:  torch.Size([1, 16384, 3]) 

boxes:  torch.Size([1, 35, 7])
#######################################

box_idxs_of_pts:  torch.Size([16384]) 


####################points_in_boxes_gpu
points:  torch.Size([1, 16384, 3]) 

boxes:  torch.Size([1, 35, 7])
#######################################

point_cls_labels:  torch.Size([32768]) 

point_box_labels:  torch.Size([32768, 8]) 

ENTER

self.training = %d True 

self.predict_boxes_when_training = %d {'NAME': 'PointRCNNHead', 'CLASS_AGNOSTIC': True, 'ROI_POINT_POOL': {'POOL_EXTRA_WIDTH': [0.0, 0.0, 0.0], 'NUM_SAMPLED_POINTS': 512, 'DEPTH_NORMALIZER': 70.0}, 'XYZ_UP_LAYER': [128, 128], 'CLS_FC': [256, 256], 'REG_FC': [256, 256], 'DP_RATIO': 0.0, 'USE_BN': False, 'SA_CONFIG': {'NPOINTS': [128, 32, -1], 'RADIUS': [0.2, 0.4, 100], 'NSAMPLE': [16, 16, 16], 'MLPS': [[128, 128, 128], [128, 128, 256], [256, 256, 512]]}, 'NMS_CONFIG': {'TRAIN': {'NMS_TYPE': 'nms_gpu', 'MULTI_CLASSES_NMS': False, 'NMS_PRE_MAXSIZE': 9000, 'NMS_POST_MAXSIZE': 512, 'NMS_THRESH': 0.8}, 'TEST': {'NMS_TYPE': 'nms_gpu', 'MULTI_CLASSES_NMS': False, 'NMS_PRE_MAXSIZE': 9000, 'NMS_POST_MAXSIZE': 100, 'NMS_THRESH': 0.85}}, 'TARGET_CONFIG': {'BOX_CODER': 'ResidualCoder', 'ROI_PER_IMAGE': 128, 'FG_RATIO': 0.5, 'SAMPLE_ROI_BY_EACH_CLASS': True, 'CLS_SCORE_TYPE': 'cls', 'CLS_FG_THRESH': 0.6, 'CLS_BG_THRESH': 0.45, 'CLS_BG_THRESH_LO': 0.1, 'HARD_BG_RATIO': 0.8, 'REG_FG_THRESH': 0.55}, 'LOSS_CONFIG': {'CLS_LOSS': 'BinaryCrossEntropy', 'REG_LOSS': 'smooth-l1', 'CORNER_LOSS_REGULARIZATION': True, 'LOSS_WEIGHTS': {'rcnn_cls_weight': 1.0, 'rcnn_reg_weight': 1.0, 'rcnn_corner_weight': 1.0, 'code_weights': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]}}} 

batch_dict: 
 dict_keys(['points', 'frame_id', 'gt_boxes', 'use_lead_xyz', 'image_shape', 'batch_size', 'point_features', 'point_coords', 'point_cls_scores', 'batch_cls_preds', 'batch_box_preds', 'batch_index', 'cls_preds_normalized']) 

